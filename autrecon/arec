#!/usr/bin/python

# Start recon with URL as parameter
# dirscan, wafwoof, gobuster, subfinder

import os, sys, argparse, shutil, subprocess, re
import concurrent.futures

def timeout_handler(signum, frame):
    raise TimeoutException("Timeout in function execution")

#GOBUSTER_WORDLIST='/usr/share/wordlists/dirb/big.txt'
GOBUSTER_WORDLIST='test.txt'

parser = argparse.ArgumentParser(description='Automatic recon para pentest')
parser.add_argument('--hostlist', '-l', type=str, help='Lista de Hosts ou URLs')
parser.add_argument('--no-nmap', action='store_true', help='No NMAP scan')
parser.add_argument('--no-dirscan', action='store_true', help='No dirscan')
parser.add_argument('--no-gobuster', action='store_true', help='No gobuster')
parser.add_argument('--no-wafwoof', action='store_true', help='No wafwoof')
parser.add_argument('--no-whois', action='store_true', help='No wafwoof')

def divider():
    s, _ = shutil.get_terminal_size()
    print("-" * s)

def screen_block(text):
    text = str(text)
    tsize, _ = shutil.get_terminal_size()
    blankspace_size = (tsize - len(text)) // 2
    blankspace = ' ' * (blankspace_size - 1)
    divider()
    print('|' + blankspace + text + blankspace + '|')
    divider()

def run_wafwoof(_host):
    screen_block('WAF detection')
    command = f"wafw00f {_host} | egrep '\[[+-]\]'"
    os.system(command)

def bannergrab(port, host):
    command = f"timeout 10s bannergrab.py {host} {port}"
    os.system(command)

def run_bannergrab(port_list, host):
    screen_block('Banner Grabbing')
    for port in port_list:
        if(port in ['80','443']): continue
        bannergrab(port,host)

def run_whois(host):
    screen_block('Whois')
    command = f"whois {host} | grep -v '%' | awk NF"
    os.system(command)

# Runs NMAP and returns the ports open
def run_nmap(_host):
    screen_block('NMAP - Open ports, Syn Scan')
    command = f"sudo nmap -sS {_host} -vv --open --top-ports=10 -oN recon/nmap.txt | grep /tcp | grep -v 'Discovered'"
    with subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, shell=True, text=True, universal_newlines=True) as p:
        output = ''
        for l in p.stdout:
            print(l, end='', flush=True)
            output = f'{output}{l}'
        pattern = r"([0-9]+)/tcp"
        return re.findall(pattern, output)

def run_gobuster(_host):
    screen_block(f'Directories GOBUSTER {GOBUSTER_WORDLIST}')
    command = f'gobuster dir -t 50 --wordlist={GOBUSTER_WORDLIST} -u {_host} --random-agent --no-error -r -q -e'
    os.system(command)

def run_subfinder(_host):
    command = f'subfinder -dL {args.hostlist} -silent'
    divider()
    print(f'Subfinder:\n{command}\n')
    os.system(command)

if __name__=='__main__':
    args = parser.parse_args()
#    if(args.hostlist is None): exit()
#    with open(args.hostlist, 'r') as f:
#        _host = f.readline()
#        _host = _host.strip()
#        while _host:
#            ports = run_nmap(_host)
#            if('80' in ports):
#                run_wafwoof(_host)
#                run_gobuster(_host)
#            run_bannergrab(ports, _host)
#            _host = f.readline()
    run_bannergrab(['22','80', '113'], 'sig.ifs.edu.br')
    # os.system(f'gobuster dir -t 50 --wordlist=/usr/share/wordlists/dirb/big.txt {args.hostlist} ')
    # se nao for vazia > for na lista > cada funcao roda com esse host
